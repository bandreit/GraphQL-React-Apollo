{"version":3,"sources":["logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","style","textDecoration","div","whileHover","scale","whileTap","MissionKey","LAUNCHES_QUERY","gql","Launches","useState","isComplete","setIsComplete","scrollYProgress","useViewportScroll","yRange","useTransform","pathLength","useSpring","stiffness","damping","futureSort","setFutureSort","dateSort","setDateSort","useEffect","onChange","v","useQuery","loading","error","data","type","color","height","width","textAlign","launches","filter","value","moment","isAfter","sort","a","b","dateA","dateB","comparison","map","key","viewBox","path","fill","strokeWidth","stroke","strokeDasharray","d","rotate","translateX","translateY","scaleX","initial","animate","checked","e","id","htmlFor","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","display","margin","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4bc99834.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4243060d.jpg\";","import React from \"react\";\r\nimport className from \"classnames\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"../App.css\";\r\n\r\nconst LaunchItem = ({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\r\n}) => {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission:{\" \"}\r\n            <span\r\n              className={className({\r\n                \"text-success\": launch_success,\r\n                \"text-danger\": !launch_success,\r\n              })}\r\n            >\r\n              {mission_name}\r\n            </span>\r\n          </h4>\r\n          <p>\r\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n          </p>\r\n        </div>\r\n        <div className=\"col-md-3 my-auto\">\r\n          <Link\r\n            to={`/launch/${flight_number}`}\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <motion.div\r\n              whileHover={{ scale: 1.2 }}\r\n              whileTap={{ scale: 0.8 }}\r\n              className=\"button\"\r\n            >\r\n              Launch Details\r\n            </motion.div>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchItem;\r\n","import React from \"react\";\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\"></span> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\"></span> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport moment from \"moment/min/moment-with-locales\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {\r\n  motion,\r\n  useViewportScroll,\r\n  useSpring,\r\n  useTransform,\r\n} from \"framer-motion\";\r\nimport LaunchItem from \"./LaunchItem\";\r\nimport MissionKey from \"./MissionKey\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launches = () => {\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const { scrollYProgress } = useViewportScroll();\r\n  const yRange = useTransform(scrollYProgress, [0, 0.9], [0, 1]);\r\n  const pathLength = useSpring(yRange, { stiffness: 400, damping: 90 });\r\n  const [futureSort, setFutureSort] = useState(false);\r\n  const [dateSort, setDateSort] = useState(false);\r\n\r\n  useEffect(() => yRange.onChange((v) => setIsComplete(v >= 1)), [yRange]);\r\n\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n\r\n  if (loading)\r\n    return (\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        style={{ textAlign: \"center\" }}\r\n      />\r\n    );\r\n  if (error)\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <p>Error :(</p>\r\n        <br></br>\r\n        <Loader\r\n          type=\"Grid\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          style={{ textAlign: \"center\" }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  const compare = (a, b) => {\r\n    const dateA = a.launch_date_local;\r\n    const dateB = b.launch_date_local;\r\n\r\n    let comparison = 0;\r\n    if (dateA > dateB) {\r\n      comparison = dateSort ? 1 : -1;\r\n    } else if (dateA < dateB) {\r\n      comparison = dateSort ? -1 : 1;\r\n    }\r\n    return comparison;\r\n  };\r\n\r\n  const inTheFuture = (value) => {\r\n    return futureSort\r\n      ? true\r\n      : !moment(value.launch_date_local).isAfter(moment());\r\n  };\r\n\r\n  const launches = data.launches\r\n    .filter(inTheFuture)\r\n    .sort(compare)\r\n    .map((launch) => <LaunchItem key={launch.flight_number} launch={launch} />);\r\n\r\n  return (\r\n    <>\r\n      <svg className=\"progress-icon\" viewBox=\"0 0 60 60\">\r\n        <motion.path\r\n          fill=\"none\"\r\n          strokeWidth=\"5\"\r\n          stroke=\"white\"\r\n          strokeDasharray=\"0 1\"\r\n          d=\"M 0, 20 a 20, 20 0 1,0 40,0 a 20, 20 0 1,0 -40,0\"\r\n          style={{\r\n            pathLength,\r\n            rotate: 90,\r\n            translateX: 5,\r\n            translateY: 5,\r\n            scaleX: -1, // Reverse direction of line animation\r\n          }}\r\n        />\r\n        <motion.path\r\n          fill=\"none\"\r\n          strokeWidth=\"5\"\r\n          stroke=\"white\"\r\n          d=\"M14,26 L 22,33 L 35,16\"\r\n          initial={false}\r\n          strokeDasharray=\"0 1\"\r\n          animate={{ pathLength: isComplete ? 1 : 0 }}\r\n        />\r\n      </svg>\r\n      <div>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-5\">\r\n            <MissionKey />\r\n          </div>\r\n          <div className=\"col-md-5 offset-md-2 my-auto\">\r\n            <div className=\"row d-flex justify-content-end align-items-center\">\r\n              <div className=\"col-md-5 custom-control custom-switch d-flex justify-content-center my-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={futureSort}\r\n                  className=\"custom-control-input\"\r\n                  onChange={(e) => {\r\n                    setFutureSort(!futureSort);\r\n                  }}\r\n                  id=\"switch1\"\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"switch1\">\r\n                  Show Future Launches\r\n                </label>\r\n              </div>\r\n              <div className=\"col-md-5 form-group mb-2\">\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"exampleFormControlSelect1\"\r\n                  onChange={(e) => setDateSort(!dateSort)}\r\n                >\r\n                  <option>Newest</option>\r\n                  <option>Oldest</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {launches}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Launches;\r\n","import React from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport className from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launch = (props) => {\r\n  let { flight_number } = props.match.params;\r\n  flight_number = parseInt(flight_number);\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { flight_number },\r\n  });\r\n\r\n  if (loading)\r\n    return (\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        style={{ textAlign: \"center\" }}\r\n      />\r\n    );\r\n  if (error)\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <p>Error :(</p>\r\n        <br></br>\r\n        <Loader type=\"Grid\" color=\"#00BFFF\" height={100} width={100} />\r\n      </div>\r\n    );\r\n\r\n  const {\r\n    mission_name,\r\n    launch_year,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type },\r\n  } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">\r\n        <span className=\"text-dark\"> Mission:</span> {mission_name}\r\n      </h1>\r\n      <h4 className=\"mb-3\">Launch Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n        <li className=\"list-group-item\">\r\n          Launch Successful:{\" \"}\r\n          <span\r\n            className={className({\r\n              \"text-success\": launch_success,\r\n              \"text-danger\": !launch_success,\r\n            })}\r\n          >\r\n            {launch_success ? \"Yep\" : \"Nope\"}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n      <h4 className=\"my-3\">Rocket Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n      </ul>\r\n\r\n      <Link className=\"my-3 btn btn-secondary\" to=\"/\">\r\n        BACK\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Launch;\r\n","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport \"./App.css\";\r\nimport logo from \"./logo.jpg\";\r\nimport Launches from \"./components/Launches\";\r\nimport Launch from \"./components/Launch\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"container\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src={logo}\r\n              alt=\"SpaceX\"\r\n              style={{ width: 300, display: \"block\", margin: \"auto\" }}\r\n            ></img>\r\n          </Link>\r\n          <Route exact path=\"/\" component={Launches} />\r\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}